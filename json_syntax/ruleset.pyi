from typing import Optional

logger: logging.Logger = ...
TRACE: int = ...

def trace(fmt, *args, _logger=logger, _TRACE=TRACE) -> None: ...
def set_trace(enabled: bool = True) -> None: ...

class SimpleRuleSet:
    def __init__(self, *rules, cache=None) -> None: ...
    def lookup(self, verb, typ, accept_missing: bool = False): ...
    def fallback(self, verb, typ) -> None: ...

class RuleSet:
    def is_ambiguous(
        self, typ, threshold: pattern.Matches = json_syntax.pattern.Matches.always
    ): ...
    def fallback(self, verb, typ) -> Optional[pattern._Unknown]: ...
